#include <util/crc16.h>
#include "Arduino.h"
#include "Wire.h"

void setup() {
    delay(5000);
    Wire.begin();
}

#define page_size 64
#define frame_size 16
#define blank 0xff
#define pages 28
#define firmware_length 1792
#define DELAY 1
#define LEFT_ADDRESS 0x50
#define RIGHT_ADDRESS 0x53


#define ENDTRANS_SUCCESS 0
#define ENDTRANS_DATA_TOO_LONG 1
#define ENDTRANS_ADDR_NACK 2
#define ENDTRANS_DATA_NACK 3
#define ENDTRANS_ERROR 4

uint16_t offsets[pages] = {0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728};
const byte firmware[firmware_length] PROGMEM = {0x1b, 0xc0, 0x35, 0xc0, 0x34, 0xc0, 0x33, 0xc0, 0x32, 0xc0, 0x31, 0xc0, 0x30, 0xc0, 0x2f, 0xc0, 0x2e, 0xc0, 0xc7, 0xc1, 0x2c, 0xc0, 0x2b, 0xc0, 0x2a, 0xc0, 0x29, 0xc0, 0x28, 0xc0, 0x58, 0xc1, 0x26, 0xc0, 0x25, 0xc0, 0x24, 0xc0, 0xcc, 0xc1, 0x32, 0xc0, 0x33, 0xc0, 0x39, 0xc0, 0x3e, 0xc0, 0x23, 0xc0, 0x42, 0xc0, 0x47, 0xc0, 0x4d, 0xc0, 0x11, 0x24, 0x1f, 0xbe, 0xcf, 0xef, 0xd2, 0xe0, 0xde, 0xbf, 0xcd, 0xbf, 0x11, 0xe0, 0xa0, 0xe0, 0xb1, 0xe0, 0xe2, 0xec, 0xf6, 0xe0, 0x2, 0xc0, 0x5, 0x90, 0xd, 0x92, 0xa0, 0x31, 0xb1, 0x7, 0xd9, 0xf7, 0x21, 0xe0, 0xa0, 0xe1, 0xb1, 0xe0, 0x1, 0xc0, 0x1d, 0x92, 0xad, 0x3d, 0xb2, 0x7, 0xe1, 0xf7, 0x6c, 0xd2, 0x28, 0xc3, 0xc8, 0xcf, 0x90, 0xe0, 0x88, 0x30, 0x91, 0x5, 0x38, 0xf0, 0x81, 0xed, 0x8c, 0xbd, 0x9d, 0xb5, 0x81, 0xe0, 0x89, 0x27, 0x8d, 0xbd, 0x8, 0x95, 0xfc, 0x1, 0xec, 0x5e, 0xff, 0x4f, 0x9, 0x94, 0x1c, 0xbc, 0x8, 0x95, 0x83, 0xed, 0x8c, 0xbd, 0x9d, 0xb5, 0x81, 0xe0, 0x89, 0x27, 0x8d, 0xbd, 0x8, 0x95, 0x83, 0xed, 0x8c, 0xbd, 0x8d, 0xb5, 0x81, 0x60, 0x8d, 0xbd, 0x8, 0x95, 0x82, 0xed, 0x8c, 0xbd, 0x8d, 0xb5, 0x81, 0x60, 0x8d, 0xbd, 0x8, 0x95, 0x81, 0xed, 0x8c, 0xbd, 0x8d, 0xb5, 0x81, 0x60, 0x8d, 0xbd, 0x8, 0x95, 0x80, 0xed, 0x8c, 0xbd, 0x9d, 0xb5, 0x81, 0xe0, 0x89, 0x27, 0x8d, 0xbd, 0x8, 0x95, 0x80, 0xed, 0x8c, 0xbd, 0x8d, 0xb5, 0x81, 0x60, 0x8d, 0xbd, 0x8, 0x95, 0xe0, 0x91, 0x37, 0x1, 0xe0, 0x34, 0x70, 0xf4, 0x90, 0x91, 0x36, 0x1, 0x21, 0xe0, 0x2e, 0xf, 0x20, 0x93, 0x37, 0x1, 0xf0, 0xe0, 0xe9, 0xf, 0xf1, 0x1d, 0xef, 0x73, 0xff, 0x27, 0xea, 0x5c, 0xfe, 0x4f, 0x82, 0x83, 0x8, 0x95, 0xfc, 0x1, 0x90, 0x81, 0x89, 0x2f, 0x80, 0x7f, 0x80, 0x38, 0xc1, 0xf4, 0xf8, 0x94, 0x9f, 0x70, 0xa9, 0x2f, 0xb0, 0xe0, 0xa9, 0xf, 0xb1, 0x1d, 0xa9, 0xf, 0xb1, 0x1d, 0xaa, 0xf, 0xbb, 0x1f, 0xaa, 0xf, 0xbb, 0x1f, 0xaa, 0xf, 0xbb, 0x1f, 0xa7, 0x58, 0xbe, 0x4f, 0x88, 0xe1, 0x31, 0x96, 0x1, 0x90, 0xd, 0x92, 0x8a, 0x95, 0xe1, 0xf7, 0x78, 0x94, 0x8, 0x95, 0x93, 0x30, 0x89, 0xf1, 0x18, 0xf1, 0x96, 0x30, 0x31, 0xf0, 0x97, 0x30, 0x9, 0xf4, 0x40, 0xc0, 0x94, 0x30, 0x39, 0xf0, 0x8, 0x95, 0x62, 0x30, 0x9, 0xf4, 0x43, 0xc0, 0x90, 0x93, 0x78, 0x1, 0x8, 0x95, 0x65, 0x30, 0xb9, 0xf7, 0x21, 0x81, 0xf8, 0x94, 0x82, 0x2f, 0x90, 0xe0, 0x82, 0xf, 0x91, 0x1d, 0x82, 0xf, 0x91, 0x1d, 0xdc, 0x1, 0xa7, 0x58, 0xbe, 0x4f, 0x22, 0x81, 0x33, 0x81, 0x44, 0x81, 0x2d, 0x93, 0x3d, 0x93, 0x4c, 0x93, 0x78, 0x94, 0x8, 0x95, 0x91, 0x30, 0x31, 0xf3, 0x92, 0x30, 0x31, 0xf5, 0x62, 0x30, 0x11, 0xf7, 0x81, 0x81, 0x90, 0xe0, 0x90, 0x93, 0x89, 0x0, 0x80, 0x93, 0x88, 0x0, 0x8, 0x95, 0x64, 0x30, 0xa9, 0xf6, 0xf8, 0x94, 0x8f, 0xe1, 0x90, 0xe0, 0xdc, 0x1, 0xaa, 0xf, 0xbb, 0x1f, 0xa8, 0xf, 0xb9, 0x1f, 0xa7, 0x58, 0xbe, 0x4f, 0x21, 0x81, 0x32, 0x81, 0x43, 0x81, 0x2d, 0x93, 0x3d, 0x93, 0x4c, 0x93, 0x1, 0x97, 0x88, 0xf7, 0xdc, 0xcf, 0x81, 0x81, 0x80, 0x32, 0x8, 0xf0, 0xbe, 0xcf, 0x80, 0x52, 0x80, 0x93, 0xe, 0x1, 0x8, 0x95, 0x8, 0x95, 0x81, 0x81, 0x80, 0x93, 0xc, 0x1, 0x43, 0xcf, 0x80, 0x91, 0x37, 0x1, 0x88, 0x23, 0x79, 0xf0, 0x90, 0x91, 0x36, 0x1, 0xe9, 0x2f, 0xf0, 0xe0, 0xea, 0x5c, 0xfe, 0x4f, 0x22, 0x81, 0x81, 0x50, 0x80, 0x93, 0x37, 0x1, 0x9f, 0x5f, 0x9f, 0x73, 0x90, 0x93, 0x36, 0x1, 0x82, 0x2f, 0x8, 0x95, 0xf, 0x93, 0x1f, 0x93, 0xcf, 0x93, 0xdf, 0x93, 0xfc, 0x1, 0xdb, 0x1, 0x8c, 0x91, 0x88, 0x23, 0x89, 0xf0, 0x90, 0x91, 0x78, 0x1, 0x91, 0x30, 0x51, 0xf1, 0xa0, 0xf1, 0x92, 0x30, 0xc1, 0xf0, 0x96, 0x30, 0x69, 0xf4, 0x80, 0x91, 0xc, 0x1, 0x80, 0x83, 0x81, 0xe0, 0xfb, 0x1, 0x80, 0x83, 0x10, 0x92, 0x78, 0x1, 0xdf, 0x91, 0xcf, 0x91, 0x1f, 0x91, 0xf, 0x91, 0x8, 0x95, 0x81, 0xe0, 0x80, 0x83, 0xdb, 0x1, 0x8c, 0x93, 0xdf, 0x91, 0xcf, 0x91, 0x1f, 0x91, 0xf, 0x91, 0x8, 0x95, 0x80, 0x91, 0x88, 0x0, 0x90, 0x91, 0x89, 0x0, 0x80, 0x83, 0x81, 0xe0, 0xdb, 0x1, 0x8c, 0x93, 0x10, 0x92, 0x78, 0x1, 0xdf, 0x91, 0xcf, 0x91, 0x1f, 0x91, 0xf, 0x91, 0x8, 0x95, 0x83, 0xe0, 0x80, 0x83, 0xfb, 0x1, 0x90, 0x83, 0x10, 0x92, 0x78, 0x1, 0xdf, 0x91, 0xcf, 0x91, 0x1f, 0x91, 0xf, 0x91, 0x8, 0x95, 0x80, 0x91, 0x37, 0x1, 0x81, 0x11, 0x9, 0xc0, 0x10, 0x82, 0x81, 0xe0, 0xfb, 0x1, 0x80, 0x83, 0xdf, 0x91, 0xcf, 0x91, 0x1f, 0x91, 0xf, 0x91, 0x8, 0x95, 0x8b, 0x1, 0xef, 0x1, 0x81, 0xe0, 0x80, 0x83, 0x98, 0xdf, 0x89, 0x83, 0x96, 0xdf, 0x8a, 0x83, 0x94, 0xdf, 0x8b, 0x83, 0x92, 0xdf, 0x8c, 0x83, 0x85, 0xe0, 0xd8, 0x1, 0x8c, 0x93, 0xbb, 0xcf, 0x1f, 0x92, 0xf, 0x92, 0xf, 0xb6, 0xf, 0x92, 0x11, 0x24, 0x8f, 0x93, 0x9f, 0x93, 0xef, 0x93, 0xff, 0x93, 0x80, 0x91, 0xdb, 0x1, 0x90, 0x91, 0xdc, 0x1, 0x81, 0x30, 0x91, 0x5, 0x31, 0xf1, 0xa0, 0xf0, 0x2, 0x97, 0x49, 0xf4, 0x1e, 0xbc, 0x80, 0x91, 0xda, 0x1, 0x8f, 0x5f, 0x80, 0x93, 0xda, 0x1, 0x88, 0x30, 0x9, 0xf4, 0x3f, 0xc0, 0xff, 0x91, 0xef, 0x91, 0x9f, 0x91, 0x8f, 0x91, 0xf, 0x90, 0xf, 0xbe, 0xf, 0x90, 0x1f, 0x90, 0x18, 0x95, 0x1e, 0xbc, 0x80, 0x91, 0xda, 0x1, 0x8f, 0x5f, 0x80, 0x93, 0xda, 0x1, 0x88, 0x30, 0x79, 0xf7, 0x81, 0xe0, 0x90, 0xe0, 0x90, 0x93, 0xdc, 0x1, 0x80, 0x93, 0xdb, 0x1, 0x10, 0x92, 0xda, 0x1, 0xe6, 0xcf, 0x80, 0x91, 0xd9, 0x1, 0x8f, 0x5f, 0x80, 0x93, 0xd9, 0x1, 0x81, 0x30, 0x29, 0xf1, 0xe0, 0x91, 0xda, 0x1, 0x81, 0xe0, 0x8e, 0xf, 0x80, 0x93, 0xda, 0x1, 0xf0, 0xe0, 0xe7, 0x58, 0xfe, 0x4f, 0x80, 0x81, 0x8e, 0xbd, 0x80, 0x91, 0xd9, 0x1, 0x84, 0x30, 0xd1, 0xf0, 0x80, 0x91, 0xda, 0x1, 0x80, 0x36, 0x61, 0xf6, 0x82, 0xe0, 0x90, 0xe0, 0x90, 0x93, 0xdc, 0x1, 0x80, 0x93, 0xdb, 0x1, 0x10, 0x92, 0xda, 0x1, 0x10, 0x92, 0xd9, 0x1, 0xc1, 0xcf, 0x10, 0x92, 0xdc, 0x1, 0x10, 0x92, 0xdb, 0x1, 0x10, 0x92, 0xda, 0x1, 0xba, 0xcf, 0x80, 0x91, 0xe, 0x1, 0x8e, 0xbd, 0xe6, 0xcf, 0x10, 0x92, 0xd9, 0x1, 0xe3, 0xcf, 0x1f, 0x92, 0xf, 0x92, 0xf, 0xb6, 0xf, 0x92, 0x11, 0x24, 0x8f, 0x93, 0x81, 0xe0, 0x80, 0x93, 0xd, 0x1, 0x8f, 0x91, 0xf, 0x90, 0xf, 0xbe, 0xf, 0x90, 0x1f, 0x90, 0x18, 0x95, 0x1f, 0x92, 0xf, 0x92, 0xf, 0xb6, 0xf, 0x92, 0x11, 0x24, 0x2f, 0x93, 0x3f, 0x93, 0x4f, 0x93, 0x5f, 0x93, 0x6f, 0x93, 0x7f, 0x93, 0x8f, 0x93, 0x9f, 0x93, 0xaf, 0x93, 0xbf, 0x93, 0xef, 0x93, 0xff, 0x93, 0x80, 0x91, 0xb9, 0x0, 0x88, 0x39, 0x9, 0xf4, 0x77, 0xc0, 0xc8, 0xf1, 0x88, 0x3b, 0x9, 0xf4, 0x83, 0xc0, 0x70, 0xf5, 0x88, 0x3a, 0x9, 0xf4, 0x46, 0xc0, 0x80, 0x3b, 0x9, 0xf4, 0x43, 0xc0, 0x80, 0x3a, 0xc9, 0xf5, 0x85, 0xed, 0x80, 0x93, 0xbc, 0x0, 0x80, 0x91, 0xbc, 0x0, 0x84, 0xfd, 0xfc, 0xcf, 0xe0, 0x91, 0x10, 0x1, 0xf0, 0x91, 0x11, 0x1, 0x30, 0x97, 0x29, 0xf0, 0x60, 0x91, 0x35, 0x1, 0x82, 0xe1, 0x91, 0xe0, 0x9, 0x95, 0x85, 0xec, 0x80, 0x93, 0xbc, 0x0, 0xff, 0x91, 0xef, 0x91, 0xbf, 0x91, 0xaf, 0x91, 0x9f, 0x91, 0x8f, 0x91, 0x7f, 0x91, 0x6f, 0x91, 0x5f, 0x91, 0x4f, 0x91, 0x3f, 0x91, 0x2f, 0x91, 0xf, 0x90, 0xf, 0xbe, 0xf, 0x90, 0x1f, 0x90, 0x18, 0x95, 0x88, 0x3c, 0x51, 0xf3, 0x88, 0x3f, 0x59, 0xf3, 0x80, 0x3c, 0x69, 0xf4, 0xe5, 0xcf, 0x88, 0x37, 0x9, 0xf4, 0x44, 0xc0, 0xe8, 0xf1, 0x88, 0x38, 0xb9, 0xf1, 0x80, 0x39, 0x9, 0xf4, 0x4a, 0xc0, 0x80, 0x38, 0x9, 0xf4, 0x47, 0xc0, 0x85, 0xed, 0x80, 0x93, 0xbc, 0x0, 0x80, 0x91, 0xbc, 0x0, 0x84, 0xfd, 0xfc, 0xcf, 0xd4, 0xcf, 0x10, 0x92, 0x35, 0x1, 0xe0, 0x91, 0x33, 0x1, 0xf0, 0x91, 0x34, 0x1, 0x30, 0x97, 0x9, 0xf4, 0x48, 0xc0, 0x80, 0xe2, 0x80, 0x93, 0x32, 0x1, 0x62, 0xe3, 0x71, 0xe0, 0x82, 0xe1, 0x91, 0xe0, 0x9, 0x95, 0x80, 0x91, 0x32, 0x1, 0xe0, 0x91, 0x35, 0x1, 0x88, 0x23, 0x9, 0xf4, 0x42, 0xc0, 0x81, 0xe0, 0x8e, 0xf, 0xf0, 0xe0, 0x80, 0x93, 0x35, 0x1, 0xee, 0x5e, 0xfe, 0x4f, 0x80, 0x81, 0x80, 0x93, 0xbb, 0x0, 0x90, 0x91, 0x35, 0x1, 0x80, 0x91, 0x32, 0x1, 0x98, 0x17, 0x8, 0xf4, 0xa8, 0xcf, 0x85, 0xe8, 0x80, 0x93, 0xbc, 0x0, 0xa7, 0xcf, 0x88, 0x36, 0x21, 0xf0, 0x80, 0x37, 0x11, 0xf0, 0x80, 0x36, 0x29, 0xf6, 0x10, 0x92, 0x35, 0x1, 0x85, 0xec, 0x80, 0x93, 0xbc, 0x0, 0x9b, 0xcf, 0xe0, 0x91, 0x35, 0x1, 0x81, 0xe0, 0x8e, 0xf, 0xf0, 0xe0, 0xdc, 0xcf, 0xe0, 0x91, 0x35, 0x1, 0xe0, 0x32, 0x30, 0xf7, 0x81, 0xe0, 0x8e, 0xf, 0x80, 0x93, 0x35, 0x1, 0x80, 0x91, 0xbb, 0x0, 0xf0, 0xe0, 0xee, 0x5e, 0xfe, 0x4f, 0x80, 0x83, 0x85, 0xec, 0x80, 0x93, 0xbc, 0x0, 0x83, 0xcf, 0xe0, 0xe0, 0xf0, 0xe0, 0x81, 0xe0, 0x91, 0xe0, 0x90, 0x93, 0x32, 0x1, 0x10, 0x92, 0x12, 0x1, 0xc1, 0xcf, 0x81, 0xe0, 0x8e, 0xf, 0xf0, 0xe0, 0xf6, 0xcf, 0x87, 0xb1, 0x8f, 0x60, 0x87, 0xb9, 0x88, 0xb1, 0x8f, 0x60, 0x88, 0xb9, 0x1a, 0xb8, 0x5f, 0xef, 0x5b, 0xb9, 0x47, 0x9a, 0x3f, 0x9a, 0x80, 0x91, 0x81, 0x0, 0x8c, 0x60, 0x80, 0x93, 0x81, 0x0, 0x10, 0x92, 0x85, 0x0, 0x10, 0x92, 0x84, 0x0, 0x82, 0xe3, 0x90, 0xe0, 0x90, 0x93, 0x89, 0x0, 0x80, 0x93, 0x88, 0x0, 0x80, 0x91, 0x6f, 0x0, 0x82, 0x60, 0x80, 0x93, 0x6f, 0x0, 0x78, 0x94, 0x82, 0xe8, 0x90, 0xe0, 0x90, 0x93, 0x11, 0x1, 0x80, 0x93, 0x10, 0x1, 0x89, 0xe0, 0x91, 0xe0, 0x90, 0x93, 0x34, 0x1, 0x80, 0x93, 0x33, 0x1, 0x93, 0xb1, 0x83, 0xb1, 0x91, 0x70, 0x82, 0x70, 0x89, 0x2b, 0x88, 0x65, 0x88, 0xf, 0x80, 0x93, 0xba, 0x0, 0x50, 0x93, 0xbb, 0x0, 0x80, 0x91, 0xb9, 0x0, 0x8e, 0x7f, 0x80, 0x93, 0xb9, 0x0, 0x80, 0x91, 0xb9, 0x0, 0x8d, 0x7f, 0x80, 0x93, 0xb9, 0x0, 0x85, 0xec, 0x80, 0x93, 0xbc, 0x0, 0x78, 0x94, 0xf8, 0x94, 0x8f, 0xe1, 0x90, 0xe0, 0x20, 0xe0, 0x30, 0xe0, 0x40, 0xe0, 0xfc, 0x1, 0xee, 0xf, 0xff, 0x1f, 0xe8, 0xf, 0xf9, 0x1f, 0xe7, 0x58, 0xfe, 0x4f, 0x20, 0x83, 0x31, 0x83, 0x42, 0x83, 0x1, 0x97, 0x88, 0xf7, 0x78, 0x94, 0x8c, 0xe2, 0x84, 0xb9, 0x85, 0xb1, 0x83, 0x7d, 0x85, 0xb9, 0x80, 0x91, 0xc, 0x1, 0x36, 0xdd, 0x10, 0x92, 0xdc, 0x1, 0x10, 0x92, 0xdb, 0x1, 0x1e, 0xbc, 0x81, 0xe0, 0x80, 0x93, 0xda, 0x1, 0x10, 0x92, 0xd9, 0x1, 0xee, 0x24, 0xe3, 0x94, 0xf1, 0x2c, 0x80, 0x91, 0xd, 0x1, 0x88, 0x23, 0xe1, 0xf3, 0x62, 0xe0, 0x71, 0xe0, 0xa0, 0xe0, 0xb1, 0xe0, 0xe1, 0xe0, 0xf1, 0xe0, 0x40, 0xe0, 0x50, 0xe0, 0x10, 0xe0, 0x88, 0xb1, 0x97, 0x1, 0x4, 0x2e, 0x1, 0xc0, 0x22, 0xf, 0xa, 0x94, 0xea, 0xf7, 0x92, 0x2f, 0x90, 0x95, 0x89, 0x23, 0x88, 0xb9, 0x0, 0x0, 0x89, 0xb1, 0x98, 0xb1, 0x29, 0x2b, 0x28, 0xb9, 0xeb, 0x1, 0x38, 0x81, 0x83, 0x27, 0x2c, 0x91, 0x90, 0x81, 0x92, 0x27, 0x98, 0x23, 0x90, 0x83, 0x20, 0x95, 0x28, 0x23, 0x2c, 0x93, 0x80, 0x95, 0x82, 0x2b, 0x89, 0x2b, 0x80, 0x95, 0x38, 0x27, 0x38, 0x83, 0x18, 0xf, 0x4f, 0x5f, 0x5f, 0x4f, 0x6d, 0x5f, 0x7f, 0x4f, 0x13, 0x96, 0x33, 0x96, 0x44, 0x30, 0x51, 0x5, 0xa9, 0xf6, 0x11, 0x11, 0x3, 0xc0, 0x10, 0x92, 0xd, 0x1, 0xc3, 0xcf, 0xf8, 0x94, 0x80, 0x91, 0x2, 0x1, 0x80, 0x95, 0x1e, 0xdd, 0x80, 0x91, 0x5, 0x1, 0x80, 0x95, 0x1a, 0xdd, 0x80, 0x91, 0x8, 0x1, 0x80, 0x95, 0x16, 0xdd, 0x80, 0x91, 0xb, 0x1, 0x80, 0x95, 0x12, 0xdd, 0x78, 0x94, 0xb0, 0xcf, 0xf8, 0x94, 0xff, 0xcf, 0x0, 0x0, 0xff, 0x0, 0x0, 0xff, 0x0, 0x0, 0xff, 0x0, 0x0, 0xff, 0x4, 0x1, 0xff, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

int left_written = 0;
int right_written = 0;

// The LEFT ATTiny has a reset pin directly connected to the ATMega
void reset_left_attiny() {
    // Hold the left ATTiny in reset,
    DDRC |= _BV(6);
    PORTC &= ~_BV(6);
    delay(30);
    DDRC &= ~_BV(6); // Turn the ATTiny back on
}

// The RIGHT ATTiny is on the other side of the wired i2c bus.
// Our best chance at resetting it is by toggling the current limiter.

void reset_right_attiny() {
    // Hold the left ATTiny in reset,
    DDRC |= _BV(7);
    PORTC &= ~_BV(7);
    delay(1000);
    PORTC |= _BV(7); // Turn the ATTiny back on
}
void print_result(byte result) {
    Serial.print("result = ");
    Serial.println(result);

}

int run_command(byte address, byte command) {

    Wire.beginTransmission(address);
    Wire.write(command); // erase user space
    Wire.write(0x00); // dummy end byte
    byte result = Wire.endTransmission();
    print_result(result);
    return result;
}



byte read_crc16(byte addr, byte *version, uint16_t *crc16, uint16_t offset, uint16_t length) {
    byte result = 2;

    Wire.beginTransmission(addr);
    Wire.write(0x06); // get version and CRC16
    Wire.write(offset & 0xff); // addr (lo)
    Wire.write(offset >> 8); // addr (hi)
    Wire.write(length & 0xff); // len (lo)
    Wire.write(length >> 8); // len (hi)
    result = Wire.endTransmission();
    if (result != 0) {
        return result;
    }
    Wire.requestFrom(addr, (uint8_t) 3);
    Serial.print("Available bytes: ");
    Serial.println(Wire.available());
    if (Wire.available() == 0) {
    }
    byte v = Wire.read();
    *version = v;
    if (Wire.available() == 0) {
        return 0xFF;
    }
    byte crc16_lo = Wire.read();
    if (Wire.available() == 0) {
        return 0xFF;
    }
    byte crc16_hi = Wire.read();
    while (Wire.available()) {
        byte c = Wire.read();
    }
    *crc16 = (crc16_hi << 8) | crc16_lo;
    return result;
}


void get_version (byte addr) {

    byte result = 2;
    while (result != 0) {
        Serial.print("Reading CRC16...");

        byte version;
        uint16_t crc16;
        result = read_crc16(addr, &version, &crc16, 0, firmware_length);

        Serial.print("result ");
        Serial.println(result);

        if (result != 0) {
            _delay_ms(100);
            continue;
        }
        Serial.print("Version: ");
        Serial.println(version);
        Serial.print("Existing CRC16 of 0000-1FFF: ");
        Serial.println(crc16, HEX);
    }

}



int erase_program(byte addr) {

    Serial.println("Erasing");
    Wire.beginTransmission(addr);
    Wire.write(0x04); // erase user space
    byte result = Wire.endTransmission();
    Serial.print("result = ");
    Serial.println(result);
    if (result != 0) {
        _delay_ms(1000);
        return -1;
    }
    return 0;

}


int write_firmware(byte addr ) {

    byte result = 3;
    byte o = 0;

    for (uint16_t i = 0; i < firmware_length; i += page_size) {
        Serial.print("Page ");
        Serial.print(offsets[o]);
        Serial.print(" setting address...");
        Wire.beginTransmission(addr);
        Wire.write(0x1); // write page addr
        Wire.write(offsets[o] & 0xff); // write page addr
        Wire.write(offsets[o] >> 8);
        result = Wire.endTransmission();
        _delay_ms(DELAY);
        // got something other than ACK. Start over.
        if (result != 0) {
            Serial.println("Error setting the page address");
            return -1;
        }

        // transmit each frame separately

        for (uint8_t frame = 0; frame < page_size / frame_size; frame++) {
            Wire.beginTransmission(addr);
            Wire.write(0x2); // continue page
            uint16_t crc16 = 0xffff;
            for (uint8_t j = frame * frame_size; j < (frame + 1) * frame_size; j++) {
                if (i + j < firmware_length) {
                    uint8_t b = pgm_read_byte(&firmware[i + j]);
                    Wire.write(b);
                    crc16 = _crc16_update(crc16, b);
                } else {
                    Wire.write(blank);
                    crc16 = _crc16_update(crc16, blank);
                }
            }
            // write the CRC16, little end first
            Wire.write(crc16 & 0xff);
            Wire.write(crc16 >> 8);
            Wire.write(0x00); // dummy end byte
            result = Wire.endTransmission();
            Serial.print(": frame ");
            Serial.print(frame);
            Serial.print(" = ");
            Serial.print(result);
            // got something other than NACK. Start over.
            if (result != 3) {
                Serial.println("Error: Got something other than NACK");
                return -1;
            }
            delay(DELAY);
        }
        o++;
        Serial.println("");
    }
    return 0;
}


int verify_firmware(byte addr) {
    byte result = 3;
    // verify firmware
    Serial.println("## Verifying firmware installation");
    while (result != 0) {
        Serial.print("CRC16: ");

        byte version;
        uint16_t crc16;
        // skip the first 4 bytes, are they were probably overwritten by the reset vector preservation
        result = read_crc16(addr, &version, &crc16, offsets[0] + 4, firmware_length - 4);

        Serial.println(result);

        if (result != 0) {
            _delay_ms(100);
            continue;
        }
        Serial.print("Version: ");
        Serial.println(version);
        Serial.print("CRC CRC16 of ");
        Serial.print(offsets[0] + 4, HEX);
        Serial.print("-");
        Serial.print(offsets[0] + firmware_length, HEX);
        Serial.print(": ");
        Serial.println(crc16, HEX);

        // calculate our own CRC16
        uint16_t check_crc16 = 0xffff;
        for (uint16_t i = 4; i < firmware_length; i++) {
            check_crc16 = _crc16_update(check_crc16, pgm_read_byte(&firmware[i]));
        }
        if (crc16 != check_crc16) {
            Serial.print("CRC does not match ours: ");
            Serial.println(check_crc16, HEX);
            return -1;
        }
        Serial.println("CRC check: OK");
    }
    return 0;
}

byte update_attiny(byte addr) {
    Serial.println("Communicating");

    get_version(addr);

    int erased = erase_program(addr);

    if (erased == -1) {

        Serial.println("Erase failed.");
        return 0;
    }

    int firmware_written = write_firmware(addr);
    if(firmware_written == -1) {
        Serial.println("Firmware write failed.");
        return 0;
    }

    int firmware_verified = verify_firmware(addr);
    if(firmware_verified == -1) {
        Serial.println("Firmware verify failed");
        return 0;
    }

    Serial.println("Resetting ATTiny");
    int result = run_command(addr, 0x03); // execute app
    Serial.println("Done!");

    return 1;
}

void loop() {

    delay(5000);


    if (left_written > 0 && right_written > 0 ) {

        Serial.println ("Both ATTiny MCUs have been flashed");
        Serial.println("It is now safe to reflash your keyboard with regular firmware");
        return;
    }

    Serial.println("Starting!");

    if (left_written > 0) {
        Serial.println("Already done with the left hand.");
        // we're done
    } else {
        reset_left_attiny();
        left_written = update_attiny(LEFT_ADDRESS);

    }

    if (right_written > 0) {
        Serial.println("Already done with the right hand.");
        Serial.println(right_written);
        // we're done
    } else {
        reset_right_attiny();
        right_written = update_attiny(RIGHT_ADDRESS);
    }



}



